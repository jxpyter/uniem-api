const Blog = require("../models/blogModel");
const { APIBlogFeatures } = require("../utils/apiFeatures");
const AppError = require("./../utils/appError");

exports.getAllBlogs = async (query) => {
  const features = new APIBlogFeatures(Blog.find(), query)
    .filter() //premium filtreleme yapÄ±labilir mesela
    .search() // Arama
    .sort() // SÄ±ralama
    .limitFields() // Alan SeÃ§imi
    .paginate(); // Sayfalama

  return await features.query;
};
exports.getBlog = async (blogId, user) => {
  const blog = await Blog.findById(blogId);

  if (!blog) {
    throw new AppError(
      "Blog yazÄ±sÄ± bulunamadÄ±. KaldÄ±rÄ±lmÄ±ÅŸ veya 100 yÄ±l sonra bulunmasÄ± iÃ§in gÃ¶mÃ¼lmÃ¼ÅŸ olabilir.",
      404
    );
  }

  // ğŸ›‘ Free kullanÄ±cÄ±lar premium bloglarÄ± gÃ¶remez
  if (blog.premium && user.subscription === "free") {
    throw new AppError("Bu iÃ§eriÄŸe eriÅŸebilmek iÃ§in Ã¼ye olmalÄ±sÄ±nÄ±z!", 403);
  }

  return blog;
};
exports.likeBlog = async (blogId, user) => {
  const blog = await Blog.findById(blogId);
  if (!blog) throw new AppError("Blog bulunamadÄ±!", 404);

  if (blog.premium && user.subscription === "free") {
    throw new AppError(
      "Premium bloglarÄ± beÄŸenmek iÃ§in abonelik gerekiyor!",
      403
    );
  }

  let liked = false;

  // âœ… KullanÄ±cÄ± zaten beÄŸendiyse, beÄŸeniyi geri al
  if (blog.likes.includes(user.id)) {
    blog.likes = blog.likes.filter((like) => like.toString() !== user.id);
    liked = false; // BeÄŸeni kaldÄ±rÄ±ldÄ±
  } else {
    blog.likes.push(user.id);
    liked = true; // BeÄŸeni eklendi
  }

  await blog.save();

  return { likesCount: blog.likes.length, liked };
};
